package org.mongodb.bolt;

import backtype.storm.task.OutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.tuple.Tuple;
import com.mongodb.BasicDBObject;
import com.mongodb.DBObject;
import org.apache.log4j.Logger;
import org.mongodb.StormTupleExtractor;

import java.util.List;

import java.util.ArrayList;//davidp


import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import java.io.*;
import backtype.storm.tuple.Fields;	
import com.mongodb.BasicDBObjectBuilder;

import backtype.storm.tuple.Fields;	
import org.apache.commons.math3.linear.*;
import org.apache.commons.math3.analysis.*;

import com.mongodb.*;
import java.net.UnknownHostException;
import java.util.Date;
import com.mongodb.WriteConcern;
import com.mongodb.BasicDBObjectBuilder;
//import com.mongodb.BasicDBObjectBuilder;
import java.io.Serializable;
import java.net.UnknownHostException;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

public class BoltDtProcessor2 extends BoltDtProcessorBase2 implements Serializable{//
  static Logger LOG = Logger.getLogger(BoltDtProcessor.class);
  private LinkedBlockingQueue<Tuple> queue = new LinkedBlockingQueue<Tuple>(10000);
  private MongoBoltTask task;
  private Thread writeThread;
  private boolean inThread;
  
  private DBCursor cursor;
  private DBObject query;
  private WriteConcern writeConcern;
  //davidp 
  // RealMatrix[][] xkpM;// {{0.0616962065187},{1.0}};
  private double dPk,dPkp,dxkp00, dxkp10;
  //double xkp;
  private RealMatrix Pk, Pkp;
  private RealMatrix xk, xkp, Hk, Hkt, Rk, yk, kk, tmp1, ide;
  
  private double idrun;
  
  private double [][] xkpres;
  private double [][] Pkpres;
  
  private boolean sentinel;
  private double numbolts;
  private boolean dretreived;
  private boolean firsttime;
  
  private Mongo mongo;
  //protected SharedData sd;
 
  /*public class shareddata{
	public boolean dretreived;
  }*/
  
  
  public BoltDtProcessor2(String url, String dbName, String collectionNameProcessor, StormTupleExtractor mapper,WriteConcern writeConcern) {	
	super(url, null,new String[]{collectionNameProcessor}, null, mapper);
	//(url,null, collectionNameProcessor, mapper2,writeConcern0.NONE);//from topology
	 // super(url, null, new String[]{collectionName}, null, mapper);from mongocappedcollectionspout
	
	//super(url, null, new String[]{collectionName}, null);

	LOG.info("bolt processor creation before retreival:");
	
	//this.sd=new SharedData();
	//this.sd.dretreived=false;
	
	this.idrun=0;
	this.writeConcern = writeConcern == null ? WriteConcern.NONE : writeConcern;
	double newidrun=0;
	/*try {
		MongoURI uri = new MongoURI(url);
		// Create mongo instance
		mongo = new Mongo(uri);
		// Get the db the user wants
		db = mongo.getDB(dbName == null ? uri.getDatabase() : dbName);//
		// If we need to authenticate do it
		if (uri.getUsername() != null) {
			db.authenticate(uri.getUsername(), uri.getPassword());
		}
		} catch (UnknownHostException e) {
		
		// Log the error
		LOG.error("Unknown host for Mongo DB", e);
		// Die fast
		throw new RuntimeException(e);
		}*/
		/*
		this.query=null;
		this.collection = this.db.getCollection(collectionNameProcessor);
		this.cursor = this.collection.find(query)
		.sort(new BasicDBObject("$natural", 1));
		*/
		
		/*.addOption(Bytes.QUERYOPTION_TAILABLE)
		.addOption(Bytes.QUERYOPTION_AWAITDATA)
		.addOption(Bytes.QUERYOPTION_NOTIMEOUT);*/
		
		
	
	//if(!this.cursor.hasNext()){//check out if this is the first itme we start the topology
	//if(true){i
	LOG.info("bolt processor creation insert before while:");
	
	
	
	LOG.info("bolt processor creation insert after while:");
	if(true){
		this.dPk=2000.0d;
		this.dPkp=2000.0d;
		
		double[][] Pkdata  ={{2000.0d,0.0d},{0.0d,200.0d}};
		double[][] Pkpdata ={{2000.0d,0.0d},{0.0d,200.0d}};
		double[][] xkpdata ={{0.0616962065187d},{1.0d}};

		xkp = new Array2DRowRealMatrix(xkpdata);
		Pkp = new Array2DRowRealMatrix(Pkpdata);
		Pk  = new Array2DRowRealMatrix(Pkdata);
	}
	else{//if not, retreive the old state
		
		
	}
	
  }

  public BoltDtProcessor2( StormTupleExtractor mapper, boolean inThread) {
    super( mapper);
    // Run the insert in a seperate thread
    this.inThread = inThread;
    LOG.info("bolt creation inThread");
  }

  @Override
  public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector ) {
    super.prepare(map, topologyContext, outputCollector);
    // If we want to run the inserts in a separate thread
    
  }

  @Override
  public void execute(Tuple tuple) {
    if (this.inThread) {
	//try if this is where the updates have to be done
	LOG.info("execution bolt:");
	Tuple tupledoubled;
      this.queue.add(tuple);
    } else {
     }
	LOG.info("execution bolt map:");
	////////////////////code to convert and emit tuples to DataProcessorBolt
	
  }

  @Override
  public void afterExecuteTuple(Tuple tuple) {
  }

  @Override
  public void cleanup() {
    if (this.inThread) this.task.stopThread();
	/*try  {//file approach
		FileWriter fstream = new FileWriter("/home/parallels/out.txt", true); //true tells to append data.
		BufferedWriter out = new BufferedWriter(fstream);
		out.write("Pkp: " +Pkp+   "\n");
		out.write("Xkp00:"+Xkp00+ "\n");
		out.write("Xkp10:"+Xkp10+ "\n");
		out.close();
	}
	catch (Exception e){
		System.err.println("Error: " + e.getMessage());
	}*/
	
	/*
	DBObject object=BasicDBObjectBuilder.start()//mongodb approach//
	.add("SaveNumber",this.idrun++)
	//.add("numprocbolts",numnowbolts)
	.add("Pkp", Pkp)
	.add("Xk00",xkpres[0][0])
	.add("Xk10",xkpres[1][0] )
	//.add( "timestamp", new Date())
	.get(); 
	
	this.collection.insert(object, this.writeConcern);*/
  }

  @Override
  public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {
	//outputFieldsDeclarer.declare(new Fields(this.mapper.fields()));
  }
  
  private void mmult(double [][]mm, String name){
	System.out.print("name: "+name+"\n");
		for (int i = 0; i < mm.length; i++) {
                 	for (int j = 0; j < mm[i].length; j++) {
                        System.out.print(mm[i][j] + " (" + i +") ("+ j +") ");
                 }
                 System.out.print("\n");
         	}

	}
  
}
