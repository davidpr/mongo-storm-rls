package org.mongodb.bolt;

import com.mongodb.*;
import org.apache.log4j.Logger;

import java.io.Serializable;
import java.net.UnknownHostException;
import java.util.concurrent.Callable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;

import java.io.*;
// We need to handle the actual messages in an internal thread to ensure we never block, so we will be using a non blocking queue between the
// driver and the db
abstract class BoltDtProcessorTask implements Callable<Boolean>, Runnable, Serializable {
  private static final long serialVersionUID = 4440209304544126477L;
  static Logger LOG = Logger.getLogger(BoltDtProcessorTask.class);

  private LinkedBlockingQueue<DBObject> queue;
  private Mongo mongo;
  private DB db;
  private DBCollection collection;
  private DBCursor cursor;


  // Keeps the running state
  private AtomicBoolean running = new AtomicBoolean(true);
  private String[] collectionNames;
  private DBObject query;
  
  private int numelems;
  private int numelemnsseen;
  private int currentelem;
  private int visited;

	private SharedData sd;//davidp

  
  public BoltDtProcessorTask(SharedData sd, String url, String dbName, String[] collectionNames, DBObject query) {
    this.collectionNames = collectionNames;
    this.query = query;
    
    this.sd=sd;
    this.sd.dretreived=false;
     
   initializeMongo(url, dbName);
    
   
    
  }

  private void initializeMongo(String url, String dbName) {
    // Open the db connection
    try {
      MongoURI uri = new MongoURI(url);
      // Create mongo instance
      mongo = new Mongo(uri);
      // Get the db the user wants
      db = mongo.getDB(dbName == null ? uri.getDatabase() : dbName);
      // If we need to authenticate do it
      if (uri.getUsername() != null) {
        db.authenticate(uri.getUsername(), uri.getPassword());
      }
    } catch (UnknownHostException e) {
      // Log the error
      LOG.error("Unknown host for Mongo DB", e);
      // Die fast
      throw new RuntimeException(e);
    }
  }

  public void stopThread() {
    running.set(false);
  }

  @Override
  public Boolean call() throws Exception {
	 //while (running.get()) {
   //// String collectionName = locateValidOpCollection(collectionNames);
     //this.collection = this.db.getCollection(collectionName);
    
    ////if (collectionName == null)
      ////throw new Exception("Could not locate any of the collections provided or not capped collection");
    // Set up the collection
   
    // provide the query object
       /*
	this.collection = this.db.getCollection(collectionName);
	
	this.cursor = this.collection.find(query)//retreive last value
	.sort(new BasicDBObject("$natural", -1));
	
	DBObject object=this.cursor.next();
	if(object.containsField("dretreived")){
		LOG.info("there's previous saved state:");
		this.sd.dxkp00=(double)(object.get("dxkp00"));//there's at leat one saved value
		this.sd.dxkp10=(double)(object.get("dxkp10"));
		this.sd.dPkp00=(double)(object.get("dPkp00"));
		this.sd.dPkp01=(double)(object.get("dPkp01"));
		this.sd.dPkp10=(double)(object.get("dPkp10"));
		this.sd.dPkp11=(double)(object.get("dPkp11"));
		this.sd.firsttime=false;
	}else{
		this.sd.firsttime=true;
		LOG.info("there's no previous saved state:");
	}
	*/
	this.sd.firsttime=true;
	this.sd.dretreived=true;
	
	System.out.print("dretreived from task: "+this.sd.dretreived+"\n");
	LOG.info("end get state:");
	/*
	DBObject object=this.cursor.next();
		if(object.containsField("idrun")){
			sd.idrun=(double)(object.get("IDrun"));
		}else{
			LOG.info("there's no IDrun in the document:");
		}
       // While the thread is set to running
       while (running.get() && this.sd.dretreived==false) {
	if(!this.cursor.hasNext()){//check out if this is the first itme we start the topology
		this.sd.firsttime=true;
		this.sd.dretreived=true;
	}else{
		sd.firsttime=false;
		sd.sentinel=true;
		try {
		
		sd.dxkp00=0.0d;
		sd.dxkp10=0.0d;
		// Check if we have a next item in the collection
		while( sd.sentinel){
			if(this.cursor.hasNext()){
				//object=this.cursor.next();
				double newidrun=(double)object.get("IDrun");
				if(newidrun==sd.idrun){		
					object=this.cursor.next();
					sd.dPkp	+=(double)object.get("Pkp");
					sd.dxkp00	+=(double)object.get("Xk00");
					sd.dxkp10	+=(double)object.get("Xk10");
					sd.numbolts=sd.numbolts+1.0d;
				}else{
					sd.sentinel = false;
				}
				object=this.cursor.next();//go to next document
			}else{
				sd.sentinel = false;
			}
		}
		sd.dretreived=true;
		}
		catch (Exception e) {
		if (running.get()) throw new RuntimeException(e);
		}
	sd.dPkp  =sd.dPkp/sd.numbolts;
	sd.dxkp00=sd.dxkp00/sd.numbolts;
	sd.dxkp10=sd.dxkp10/sd.numbolts;
		
	}
  }*/
  // Dummy return
    return true;
   // }
  }

  private String locateValidOpCollection(String[] collectionNames) {
    // Find a valid collection (used for oplogs etc)
    String collectionName = null;
    for (int i = 0; i < collectionNames.length; i++) {
      String name = collectionNames[i];
      // Attempt to read from the collection
      DBCollection collection = this.db.getCollection(name);
      // Attempt to find the last item in the collection
      DBCursor lastCursor = collection.find().sort(new BasicDBObject("$natural", -1)).limit(1);
      if (lastCursor.hasNext() && collection.isCapped()) {
        collectionName = name;
        break;
      }
    }
    // return the collection name
    return collectionName;
  }

  @Override
  public void run() {
    /*try {
      call();
    } catch (Exception e) {
      LOG.error(e);
    }*/
    while (running.get() && this.sd.dretreived==false) {
    try{
    
	this.sd.firsttime=true;
	this.sd.dretreived=true;
	
	System.out.print("dretreived from task: "+this.sd.dretreived+"\n");
	LOG.info("end get state:");
    } catch (Exception e) {
        if (running.get()) throw new RuntimeException(e);
      }
    }
    stopThread();
  }
}
